generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Application {
  id           Int      @id @default(autoincrement())
  fullName     String
  email        String   @unique
  phone        String
  startupName  String
  description  String
  profileLink  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  application    Application @relation(fields: [applicationId], references: [id])
  applicationId  Int       @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  videoProgress  VideoProgress[]
  quizResults    UserQuizResult[]
}

model Video {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  url         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  progress    VideoProgress[]
  quiz        Quiz?
}

model VideoProgress {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   Int
  progress  Float    @default(0)
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, videoId])
}

model Quiz {
  id              Int               @id @default(autoincrement())
  videoId         Int               @unique
  video           Video             @relation(fields: [videoId], references: [id])
  questions       Question[]
  userQuizResults UserQuizResult[]
}


model Question {
  id        Int       @id @default(autoincrement())
  quizId    Int
  quiz      Quiz      @relation(fields: [quizId], references: [id])
  text      String
  options   Option[]
}

model Option {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  text       String
  isCorrect  Boolean
}

model UserQuizResult {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  quizId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  score     Int
  completed DateTime @default(now())
}

model OTP {
  id         Int      @id @default(autoincrement())
  type       String
  value      String
  otp        String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}
