generator client {
  provider = "prisma-client-js"
   
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

}

model Application {
  id          Int      @id @default(autoincrement())
  fullName    String
  email       String   @unique
  phone       String
  startupName String
  description String
  profileLink String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?
}

model User {
  id                Int              @id @default(autoincrement())
  email             String           @unique
  password          String
  temporaryPassword String?
  applicationId     Int              @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  application       Application      @relation(fields: [applicationId], references: [id])
  quizResults       UserQuizResult[]
  videoProgress     VideoProgress[]
}

model Video {
  id          Int             @id @default(autoincrement())
  title       String
  description String
  url         String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  quiz        Quiz?
  progress    VideoProgress[]
}

model VideoProgress {
  id        Int      @id @default(autoincrement())
  userId    Int
  videoId   Int
  progress  Float    @default(0)
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
  @@index([videoId], map: "VideoProgress_videoId_fkey")
}

model Quiz {
  id              Int              @id @default(autoincrement())
  videoId         Int              @unique
  questions       Question[]
  video           Video            @relation(fields: [videoId], references: [id])
  userQuizResults UserQuizResult[]
}

model Question {
  id      Int      @id @default(autoincrement())
  quizId  Int
  text    String
  options Option[]
  quiz    Quiz     @relation(fields: [quizId], references: [id])

  @@index([quizId], map: "Question_quizId_fkey")
}

model Option {
  id         Int      @id @default(autoincrement())
  questionId Int
  text       String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id])

  @@index([questionId], map: "Option_questionId_fkey")
}

model UserQuizResult {
  id        Int      @id @default(autoincrement())
  userId    Int
  quizId    Int
  score     Int
  completed DateTime @default(now())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([quizId], map: "UserQuizResult_quizId_fkey")
  @@index([userId], map: "UserQuizResult_userId_fkey")
}

model OTP {
  id        Int      @id @default(autoincrement())
  type      String
  value     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model TemporaryUser {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}
model Program {
  id                  Int      @id @default(autoincrement())
  title               String
  subtitle            String
  short_description   String   @db.Text
  description         String   @db.Text
  ideal_For_Description String @db.Text
  timeline_Description String @db.Text
  start_Date          DateTime
  end_Date            DateTime
  image               String
  benefits              Benefit[]
testimonials          Testimonial[]
}
model Benefit {
  id          Int      @id @default(autoincrement())
  programId   Int
  icon        String?  @db.VarChar(255)
  title       String
  description String?  @db.Text

  Program Program[]
}

model Testimonial {
  id          Int     @id @default(autoincrement())
  programId   Int
  name        String  @db.VarChar(255)
  profile     String? @db.VarChar(255)
  designation String? @db.VarChar(255)
  message     String? @db.Text

  Program Program[]
}
model Seo {
  id              Int      @id @default(autoincrement())
  meta_title      String?  @db.VarChar(255)
  meta_description String? @db.Text
  meta_keywords   String?  @db.Text
  og_images       String?  @db.LongText
  og_title        String?  @db.VarChar(255)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt
}